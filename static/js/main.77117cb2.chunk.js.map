{"version":3,"sources":["AppState.js","global/constants.js","components/Upload/Upload.js","components/Preview/Preview.js","components/Download/Download.js","components/TextControls/TextControls.js","App.js","services/ImageProcessor/ImageProcessor.js","serviceWorker.js","index.js"],"names":["AppState","_class","imageProcessor","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","createClass","key","get","tileSize","gapSize","addTextToCanvas","baseCanvas","overlayText","_this","downloadImages","previewCanvas","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","computed","getOwnPropertyDescriptor","getPlaceholderCanvas","width","height","action","_this2","_this3","file","getCanvasFromFile","then","canvas","setBaseCanvas","_this4","UploadStyled","styled","section","_templateObject","Upload","_Component","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","value","addFile","props","react_default","a","createElement","className","type","onChange","event","target","files","Component","inject","_ref","appState","observer","PreviewStyled","img","Preview_templateObject","Preview","alt","src","toDataURL","defaultProps","DownloadStyled","Download_templateObject","Download","onClick","TextControlsStyled","TextControls_templateObject","TextControls","call","setState","setOverlayText","throttle","state","initialState","_ref2","AppStyled","div","App_templateObject","ImageProcessor","createCanvas","context","getContext","fillStyle","fillRect","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","abrupt","Promise","resolve","fileReader","FileReader","onload","imageData","result","Image","targetWidth","targetHeight","xOffset","yOffset","imgProportions","drawImage","readAsDataURL","stop","_x","_x2","_x3","_x4","_x5","text","newCanvas","font","textAlign","fillText","saveBlobAsFile","blob","fileName","document","setAttribute","window","URL","createObjectURL","click","sourceCanvas","imageBlobs","imagesLeftToProcess","forEach","x","i","exportCanvas","toBlob","concat","App","index_module","role","aria-label","components_Preview_Preview","components_Upload_Upload","components_TextControls_TextControls","components_Download_Download","mobx_react_devtools_default","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.77117cb2.chunk.js","sourcesContent":["import { observable, action, computed } from 'mobx';\nimport {TILE_SIZE, GAP_SIZE } from './global/constants';\n\nexport class AppState {\n  constructor(imageProcessor) {\n    this.imageProcessor = imageProcessor;\n  }\n  @observable tileSize = TILE_SIZE;\n  @observable gapSize = GAP_SIZE;\n  @observable overlayText = '';\n  @computed get width() {\n    return this.tileSize * 3 + this.gapSize * 2;\n  }\n  @computed get height() {\n    return this.tileSize;\n  }\n  @observable inputImageData = '';\n  @observable baseCanvas = this.imageProcessor.getPlaceholderCanvas(\n    this.width,\n    this.height,\n    this.tileSize,\n    this.gapSize\n  );\n  @action setBaseCanvas = baseCanvas => {\n    this.baseCanvas = baseCanvas;\n  };\n  @computed get previewCanvas() {\n    return this.imageProcessor.addTextToCanvas(\n      this.baseCanvas,\n      this.overlayText\n    );\n  }\n  @action addFile = file => {\n    this.imageProcessor\n      .getCanvasFromFile(\n        file,\n        this.width,\n        this.height,\n        this.tileSize,\n        this.gapSize\n      )\n      .then(canvas => this.setBaseCanvas(canvas));\n  };\n\n  @action setOverlayText = overlayText => {\n    this.overlayText = overlayText;\n  };\n\n  @computed get downloadImages() {\n    return () =>\n      this.imageProcessor.downloadImages(\n        this.previewCanvas,\n        this.tileSize,\n        this.gapSize\n      );\n  }\n}\n","export const TILE_SIZE = 1080;\nexport const GAP_SIZE = 10;","import React, { Component } from 'react';\nimport { func } from 'prop-types';\nimport { observer, inject } from 'mobx-react';\nimport styled from '@emotion/styled';\n\nconst UploadStyled = styled.section`\n\n    margin: 8px;\n\n  .file-upload-content {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 250px;\n    height: 80px;\n    background: #E6E7E6;\n    border: 1px solid #476A6F;\n  }\n`;\n\nexport class Upload extends Component {\n  static propTypes = {\n    addFile: func.isRequired,\n  };\n\n  render() {\n    const { addFile } = this.props;\n    return (\n      <UploadStyled>\n        <h2>1. Upload file</h2>\n        <div className=\"file-upload-content\">\n          <input\n            className=\"file-upload\"\n            type=\"file\"\n            onChange={event => addFile(event.target.files[0])}\n          />\n        </div>\n      </UploadStyled>\n    );\n  }\n}\n\nexport default inject(({ appState }) => ({\n  addFile: appState.addFile,\n}))(observer(Upload));\n","import React, { Component } from 'react';\nimport { object } from 'prop-types';\nimport { inject, observer } from 'mobx-react';\nimport styled from '@emotion/styled';\n\nconst PreviewStyled = styled.img`\n    width: calc(100% - 72px);\n    max-width: 960px;\n\n    margin: 36px 0;\n    padding: 0;\n`;\n\nclass Preview extends Component {\n  static propTypes = {\n    previewCanvas: object,\n  };\n  static defaultProps = {\n    previewCanvas: null,\n  };\n\n  render() {\n    return (\n      <PreviewStyled\n        alt=\"Preview\"\n        src={\n          this.props.previewCanvas &&\n          this.props.previewCanvas.toDataURL('image/png')\n        }\n      />\n    );\n  }\n}\n\nexport { Preview };\nexport default inject(({ appState }) => ({\n  previewCanvas: appState.previewCanvas,\n}))(observer(Preview));\n","import React, { Component } from 'react';\nimport { func } from 'prop-types';\nimport { observer, inject } from 'mobx-react';\nimport styled from '@emotion/styled';\n\nconst DownloadStyled = styled.section`\n  margin: 8px;\n\n  .download-content {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 250px;\n    height: 80px;\n    background: #E6E7E6;\n    border: 1px solid #476a6f;\n  }\n`;\nclass Download extends Component {\n  static propTypes = {\n    downloadImages: func.isRequired,\n  };\n\n  render() {\n    return (\n      <DownloadStyled>\n        <h2>3. Download images</h2>\n        <div className=\"download-content\">\n          <button\n            className=\"download-button\"\n            onClick={this.props.downloadImages}\n          >\n            Download\n          </button>\n        </div>\n      </DownloadStyled>\n    );\n  }\n}\n\nexport { Download };\nexport default inject(({ appState }) => ({\n  downloadImages: appState.downloadImages,\n}))(observer(Download));\n","import React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { func, string } from 'prop-types';\nimport { throttle } from 'lodash';\nimport styled from '@emotion/styled';\n\nconst TextControlsStyled = styled.section`\n  margin: 8px;\n\n  .text-controls-content {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 250px;\n    height: 80px;\n    background: #E6E7E6;\n    border: 1px solid #476a6f;\n  }\n\n  .text-controls-content > * {\n    margin: 8px;\n  }\n`;\n\nexport class TextControls extends Component {\n  static propTypes = {\n    overlayText: string,\n    setOverlayText: func.isRequired,\n  };\n  static defaultProps = {\n    overlayText: '',\n  };\n\n  static initialState = {\n    overlayText: '',\n  };\n\n  constructor(props) {\n    super(props);\n    this.setOverlayText = throttle(this.props.setOverlayText, 500);\n    this.state = { overlayText: '' };\n  }\n\n  onChange = ({ target: { value } }) => {\n    this.setState({ overlayText: value });\n    this.setOverlayText(value);\n  };\n  render() {\n    return (\n      <TextControlsStyled>\n        <h2>2. Add text</h2>\n        <div className=\"text-controls-content\">\n          <p>Text:</p>\n          <input\n            type=\"text\"\n            value={this.state.overlayText}\n            onChange={this.onChange}\n          />\n        </div>\n      </TextControlsStyled>\n    );\n  }\n}\n\nexport default inject(({ appState }) => ({\n  overlayText: appState.overlayText,\n  setOverlayText: appState.setOverlayText,\n}))(observer(TextControls));\n","import React, { Component } from 'react';\nimport { Provider } from 'mobx-react';\nimport DevTools from 'mobx-react-devtools';\nimport styled from '@emotion/styled';\nimport { ImageProcessor } from './services';\nimport { AppState } from './AppState';\nimport { Preview, Upload, Download, TextControls } from './components';\n\nexport const AppStyled = styled.div`\n  @import url('https://fonts.googleapis.com/css?family=Lato');\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  min-width: 100vw;\n  min-height: 100vh;\n\n  margin: 0;\n\n  font-family: 'Lato', sans-serif;\n\n  h1 {\n    font-weight: normal;\n  }\n\n  .controls {\n    display: flex;\n    align-items: center;\n  }\n`;\n\nconst imageProcessor = new ImageProcessor();\nconst appState = new AppState(imageProcessor);\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider appState={appState}>\n        <AppStyled className=\"App\">\n          <h1>\n            <span role=\"img\" aria-label=\"Wizard emoji\">\n              🧙🏻‍♀️\n            </span>{' '}\n            Layout your image on 3x1 grid for Instagram\n          </h1>\n          <Preview />\n          <div className=\"controls\">\n            <Upload />\n            <TextControls />\n            <Download />\n          </div>\n          <DevTools />\n        </AppStyled>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import { Promise } from 'rsvp';\nimport { createCanvas } from 'canvas';\n\nexport class ImageProcessor {\n\n  getPlaceholderCanvas = (width, height, tileSize, gapSize) => {\n    const canvas = createCanvas(width, height);\n    const context = canvas.getContext('2d');\n    context.fillStyle = '#E6E7E6';\n    context.fillRect(0, 0, width, height);\n    context.fillStyle = 'white';\n    context.fillRect(tileSize + gapSize, 0, gapSize, tileSize);\n    context.fillRect(tileSize * 2 + gapSize * 2, 0, gapSize, tileSize);\n    return canvas;\n  };\n\n  getCanvasFromFile = async (file, width, height, tileSize, gapSize) =>\n    new Promise(resolve => {\n      const fileReader = new FileReader();\n\n      fileReader.onload = event => {\n        const imageData = event.target.result;\n        const img = new Image();\n\n        img.onload = ({ target }) => {\n          const img = target;\n          const canvas = createCanvas(width, height);\n          const context = canvas.getContext('2d');\n          context.fillStyle = 'white';\n          context.fillRect(0, 0, width, height);\n          let targetWidth;\n          let targetHeight;\n          let xOffset;\n          let yOffset;\n          const imgProportions = img.width / img.height;\n          const canvasProportions = width / height;\n          if (imgProportions > canvasProportions) {\n            targetWidth = width;\n            targetHeight = width / imgProportions;\n            xOffset = 0;\n            yOffset = (height - targetHeight) / 2;\n          } else {\n            targetWidth = height * imgProportions;\n            targetHeight = height;\n            xOffset = (width - targetWidth) / 2;\n            yOffset = 0;\n          }\n          context.drawImage(img, xOffset, yOffset, targetWidth, targetHeight);\n          context.fillRect(tileSize, 0, gapSize, tileSize);\n          context.fillRect(tileSize * 2 + gapSize, 0, gapSize, tileSize);\n\n          resolve(canvas);\n        };\n\n        img.src = imageData;\n      };\n      fileReader.readAsDataURL(file);\n    });\n\n  addTextToCanvas = (\n    (canvas, text) => {\n      const { width, height } = canvas;\n      const newCanvas = createCanvas(width, height);\n      const context = newCanvas.getContext('2d');\n      context.drawImage(canvas, 0, 0, width, height);\n      context.fillStyle = 'white';\n      context.font = '600px Helvetica, Arial, sans';\n      context.textAlign = 'center';\n      context.fillText(text, width / 2, height / 2 + 220);\n      return newCanvas;\n    }\n  );\n\n  saveBlobAsFile = (blob, fileName) => {\n    let a = document.createElement('a');\n    a.setAttribute('download', fileName);\n    a.setAttribute('href', window.URL.createObjectURL(blob));\n    a.click();\n  };\n\n  downloadImages = (sourceCanvas, tileSize, gapSize) => {\n    const imageBlobs = [];\n    let imagesLeftToProcess = 3;\n    [0, tileSize + gapSize, tileSize * 2 + gapSize * 2].forEach((x, i) => {\n      const exportCanvas = createCanvas(tileSize, tileSize);\n      const exportContext = exportCanvas.getContext('2d');\n      exportContext.drawImage(\n        sourceCanvas,\n        x,\n        0,\n        tileSize,\n        tileSize,\n        0,\n        0,\n        tileSize,\n        tileSize\n      );\n      exportCanvas.toBlob(blob => {\n        imageBlobs[2 - i] = blob; // reverse so that downloaded files sorted by time are in proper order\n        if (!--imagesLeftToProcess) {\n          imageBlobs.forEach((blob, i) => {\n            this.saveBlobAsFile(blob, `grid-image-${3 - i}.png`); //first download last image, then second, then first\n          });\n        }\n      });\n    });\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}