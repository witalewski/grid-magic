{"version":3,"sources":["AppState.js","global/constants.js","components/Upload/Upload.js","components/Preview/Preview.js","components/Download/Download.js","components/TextControls/TextControls.js","App.js","services/ImageProcessor/ImageProcessor.js","serviceWorker.js","index.js"],"names":["AppState","_class","imageProcessor","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","createClass","key","get","tileSize","gapSize","getTextCanvas","baseCanvas","width","height","overlayText","_this","downloadImages","textCanvas","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","computed","getOwnPropertyDescriptor","getPlaceholderCanvas","action","_this2","_this3","file","getCanvasFromFile","then","canvas","setBaseCanvas","_this4","UploadStyled","styled","section","_templateObject","inject","_ref2","addFile","appState","observer","_ref","react_default","a","createElement","className","type","onChange","event","target","files","PreviewStyled","div","Preview_templateObject","Preview","alt","src","toDataURL","defaultProps","DownloadStyled","Download_templateObject","onClick","TextControlsStyled","TextControls_templateObject","TextControls","setOverlayText","value","_ref3","AppStyled","App_templateObject","ImageProcessor","createCanvas","context","getContext","fillStyle","fillRect","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","abrupt","Promise","resolve","fileReader","FileReader","onload","imageData","result","img","Image","targetWidth","targetHeight","xOffset","yOffset","imgProportions","drawImage","readAsDataURL","stop","_x","_x2","_x3","_x4","_x5","apply","arguments","text","newCanvas","font","textAlign","fillText","saveBlobAsFile","blob","fileName","document","setAttribute","window","URL","createObjectURL","click","imageBlobs","imagesLeftToProcess","forEach","x","i","exportCanvas","exportContext","toBlob","concat","App","index_module","role","aria-label","components_Preview_Preview","components_Upload_Upload","components_TextControls_TextControls","components_Download_Download","mobx_react_devtools_default","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7b700d45.chunk.js","sourcesContent":["import { observable, action, computed } from 'mobx';\nimport {TILE_SIZE, GAP_SIZE } from './global/constants';\n\nexport class AppState {\n  constructor(imageProcessor) {\n    this.imageProcessor = imageProcessor;\n  }\n  @observable tileSize = TILE_SIZE;\n  @observable gapSize = GAP_SIZE;\n  @observable overlayText = '';\n  @computed get width() {\n    return this.tileSize * 3 + this.gapSize * 2;\n  }\n  @computed get height() {\n    return this.tileSize;\n  }\n  @observable inputImageData = '';\n  @observable baseCanvas = this.imageProcessor.getPlaceholderCanvas(\n    this.width,\n    this.height,\n    this.tileSize,\n    this.gapSize\n  );\n  @action setBaseCanvas = baseCanvas => {\n    this.baseCanvas = baseCanvas;\n  };\n  @computed get textCanvas() {\n    return this.imageProcessor.getTextCanvas(\n      this.baseCanvas.width,\n      this.baseCanvas.height,\n      this.overlayText\n    );\n  }\n  @action addFile = file => {\n    this.imageProcessor\n      .getCanvasFromFile(\n        file,\n        this.width,\n        this.height,\n        this.tileSize,\n        this.gapSize\n      )\n      .then(canvas => this.setBaseCanvas(canvas));\n  };\n\n  @action setOverlayText = overlayText => {\n    this.overlayText = overlayText;\n  };\n\n  @computed get downloadImages() {\n    return () =>\n      this.imageProcessor.downloadImages(\n        this.baseCanvas,\n        this.textCanvas,\n        this.tileSize,\n        this.gapSize\n      );\n  }\n}\n","export const TILE_SIZE = 1080;\nexport const GAP_SIZE = 10;","import React from 'react';\nimport { func } from 'prop-types';\nimport { observer, inject } from 'mobx-react';\nimport styled from '@emotion/styled';\n\nconst UploadStyled = styled.section`\n  margin: 8px;\n\n  .file-upload-content {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 250px;\n    height: 80px;\n    background: #e6e7e6;\n    border: 1px solid #476a6f;\n  }\n\n  .section-heading {\n    font-weight: normal;\n  }\n`;\n\nexport const Upload = ({ addFile }) => (\n  <UploadStyled>\n    <h2 className=\"section-heading\">1. Upload file</h2>\n    <div className=\"file-upload-content\">\n      <input\n        className=\"file-upload\"\n        type=\"file\"\n        onChange={event => addFile(event.target.files[0])}\n      />\n    </div>\n  </UploadStyled>\n);\n\nUpload.propTypes = {\n  addFile: func.isRequired,\n};\n\nexport default inject(({ appState }) => ({\n  addFile: appState.addFile,\n}))(observer(Upload));\n","import React from 'react';\nimport { object } from 'prop-types';\nimport { inject, observer } from 'mobx-react';\nimport styled from '@emotion/styled';\n\nconst PreviewStyled = styled.div`\n\n    height:311px;\n  .canvas {\n    margin: auto;\n    width: 940px;\n\n\n\n    padding: 0;\n\n    border: none;\n  }\n\n  .text-canvas {\n    transform: translateY(calc(-100% - 4px));\n  }\n`;\n\nexport const Preview = ({ baseCanvas, textCanvas }) => (\n  <PreviewStyled>\n    <img\n      className=\"canvas image-canvas\"\n      alt=\"Preview\"\n      src={baseCanvas && baseCanvas.toDataURL('image/png')}\n    />\n    <img\n      className=\"canvas text-canvas\"\n      alt=\"Preview\"\n      src={textCanvas && textCanvas.toDataURL('image/png')}\n    />\n  </PreviewStyled>\n);\n\nPreview.propTypes = {\n  baseCanvas: object,\n  textCanvas: object,\n};\n\nPreview.defaultProps = {\n  baseCanvas: null,\n  textCanvas: null,\n};\n\nexport default inject(({ appState }) => ({\n  baseCanvas: appState.baseCanvas,\n  textCanvas: appState.textCanvas,\n}))(observer(Preview));\n","import React from 'react';\nimport { func } from 'prop-types';\nimport { observer, inject } from 'mobx-react';\nimport styled from '@emotion/styled';\n\nconst DownloadStyled = styled.section`\n  margin: 8px;\n\n  .download-content {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 250px;\n    height: 80px;\n    background: #e6e7e6;\n    border: 1px solid #476a6f;\n  }\n\n  .section-heading {\n    font-weight: normal;\n  }\n`;\nexport const Download = ({ downloadImages }) => (\n  <DownloadStyled>\n    <h2 className=\"section-heading\">3. Download images</h2>\n    <div className=\"download-content\">\n      <button className=\"download-button\" onClick={downloadImages}>\n        Download\n      </button>\n    </div>\n  </DownloadStyled>\n);\n\nDownload.propTypes = {\n  downloadImages: func.isRequired,\n};\n\nexport default inject(({ appState }) => ({\n  downloadImages: appState.downloadImages,\n}))(observer(Download));\n","import React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { func, string } from 'prop-types';\n\nimport styled from '@emotion/styled';\n\nconst TextControlsStyled = styled.section`\n  margin: 8px;\n\n  .text-controls-content {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 250px;\n    height: 80px;\n    background: #e6e7e6;\n    border: 1px solid #476a6f;\n  }\n\n  .text-controls-content > * {\n    margin: 8px;\n  }\n\n  .section-heading {\n    font-weight: normal;\n  }\n`;\n\nexport const TextControls = ({ overlayText, setOverlayText }) => {\n\n  const onChange = ({ target: { value } }) => {\n    setOverlayText(value);\n  };\n\n  return (\n    <TextControlsStyled>\n      <h2 className=\"section-heading\">2. Add text</h2>\n      <div className=\"text-controls-content\">\n        <p>Text:</p>\n        <input type=\"text\" value={overlayText} onChange={onChange} />\n      </div>\n    </TextControlsStyled>\n  );\n};\n\nTextControls.propTypes = {\n  overlayText: string,\n  setOverlayText: func.isRequired,\n};\nTextControls.defaultProps = {\n  overlayText: '',\n};\n\nexport default inject(({ appState }) => ({\n  overlayText: appState.overlayText,\n  setOverlayText: appState.setOverlayText,\n}))(observer(TextControls));\n","import React from 'react';\nimport { Provider } from 'mobx-react';\nimport DevTools from 'mobx-react-devtools';\nimport styled from '@emotion/styled';\nimport { ImageProcessor } from './services';\nimport { AppState } from './AppState';\nimport { Preview, Upload, Download, TextControls } from './components';\n\nexport const AppStyled = styled.div`\n  @import url('https://fonts.googleapis.com/css?family=Lato');\n\n  * {\n    box-sizing: border-box;\n  }\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  min-width: 100vw;\n  min-height: 100vh;\n\n  margin: 0;\n\n  font-family: 'Lato', sans-serif;\n\n  .title {\n    font-weight: normal;\n  }\n\n  .controls {\n    display: flex;\n    align-items: center;\n  }\n`;\n\nconst imageProcessor = new ImageProcessor();\nconst appState = new AppState(imageProcessor);\n\nexport const App = () => (\n  <Provider appState={appState}>\n    <AppStyled className=\"App\">\n      <h1 className=\"title\">\n        <span role=\"img\" aria-label=\"Wizard emoji\">\n          🧙🏻‍♀️\n        </span>{' '}\n        Layout your image on 3x1 grid for Instagram\n      </h1>\n      <Preview />\n      <div className=\"controls\">\n        <Upload />\n        <TextControls />\n        <Download />\n      </div>\n      <DevTools />\n    </AppStyled>\n  </Provider>\n);\n\nexport default App;\n","import { Promise } from 'rsvp';\nimport { createCanvas } from 'canvas';\n\nexport class ImageProcessor {\n\n  getPlaceholderCanvas = (width, height, tileSize, gapSize) => {\n    const canvas = createCanvas(width, height);\n    const context = canvas.getContext('2d');\n    context.fillStyle = '#E6E7E6';\n    context.fillRect(0, 0, width, height);\n    context.fillStyle = 'white';\n    context.fillRect(tileSize + gapSize, 0, gapSize, tileSize);\n    context.fillRect(tileSize * 2 + gapSize * 2, 0, gapSize, tileSize);\n    return canvas;\n  };\n\n  getCanvasFromFile = async (file, width, height, tileSize, gapSize) =>\n    new Promise(resolve => {\n      const fileReader = new FileReader();\n\n      fileReader.onload = event => {\n        const imageData = event.target.result;\n        const img = new Image();\n\n        img.onload = ({ target }) => {\n          const img = target;\n          const canvas = createCanvas(width, height);\n          const context = canvas.getContext('2d');\n          context.fillStyle = 'white';\n          context.fillRect(0, 0, width, height);\n          let targetWidth;\n          let targetHeight;\n          let xOffset;\n          let yOffset;\n          const imgProportions = img.width / img.height;\n          const canvasProportions = width / height;\n          if (imgProportions > canvasProportions) {\n            targetWidth = width;\n            targetHeight = width / imgProportions;\n            xOffset = 0;\n            yOffset = (height - targetHeight) / 2;\n          } else {\n            targetWidth = height * imgProportions;\n            targetHeight = height;\n            xOffset = (width - targetWidth) / 2;\n            yOffset = 0;\n          }\n          context.drawImage(img, xOffset, yOffset, targetWidth, targetHeight);\n          context.fillRect(tileSize, 0, gapSize, tileSize);\n          context.fillRect(tileSize * 2 + gapSize, 0, gapSize, tileSize);\n\n          resolve(canvas);\n        };\n\n        img.src = imageData;\n      };\n      fileReader.readAsDataURL(file);\n    });\n\n  getTextCanvas = (\n    (width, height, text) => {\n      const newCanvas = createCanvas(width, height);\n      const context = newCanvas.getContext('2d');\n      context.fillStyle = 'white';\n      context.font = '600px Helvetica, Arial, sans';\n      context.textAlign = 'center';\n      context.fillText(text, width / 2, height / 2 + 220);\n      return newCanvas;\n    }\n  );\n\n  saveBlobAsFile = (blob, fileName) => {\n    let a = document.createElement('a');\n    a.setAttribute('download', fileName);\n    a.setAttribute('href', window.URL.createObjectURL(blob));\n    a.click();\n  };\n\n  downloadImages = (baseCanvas, textCanvas, tileSize, gapSize) => {\n    const imageBlobs = [];\n    let imagesLeftToProcess = 3;\n    [0, tileSize + gapSize, tileSize * 2 + gapSize * 2].forEach((x, i) => {\n      const exportCanvas = createCanvas(tileSize, tileSize);\n      const exportContext = exportCanvas.getContext('2d');\n      exportContext.drawImage(\n        baseCanvas,\n        x,\n        0,\n        tileSize,\n        tileSize,\n        0,\n        0,\n        tileSize,\n        tileSize\n      );\n      exportContext.drawImage(\n        textCanvas,\n        x,\n        0,\n        tileSize,\n        tileSize,\n        0,\n        0,\n        tileSize,\n        tileSize\n      );\n      exportCanvas.toBlob(blob => {\n        imageBlobs[2 - i] = blob; // reverse so that downloaded files sorted by time are in proper order\n        if (!--imagesLeftToProcess) {\n          imageBlobs.forEach((blob, i) => {\n            this.saveBlobAsFile(blob, `grid-image-${3 - i}.png`); //first download last image, then second, then first\n          });\n        }\n      });\n    });\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}