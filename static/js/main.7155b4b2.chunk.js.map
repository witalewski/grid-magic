{"version":3,"sources":["AppStyled.js","AppState.js","global/constants.js","components/Upload/Upload.js","components/Preview/Preview.js","components/Download/Download.js","components/TextControls/TextControls.js","App.js","services/ImageProcessor/ImageProcessor.js","serviceWorker.js","index.js"],"names":["AppStyled","styled","div","_templateObject","AppState","_class","imageProcessor","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","createClass","key","get","tileSize","gapSize","addTextToCanvas","baseCanvas","overlayText","_this","downloadImages","previewCanvas","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","computed","getOwnPropertyDescriptor","getPlaceholderCanvas","width","height","action","_this2","_this3","file","getCanvasFromFile","then","canvas","setBaseCanvas","_this4","Upload","_Component","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","value","addFile","props","react_default","a","createElement","className","type","onChange","event","target","files","Component","inject","_ref","appState","observer","Preview","alt","src","toDataURL","defaultProps","Download","onClick","TextControls","call","setState","setOverlayText","throttle","state","initialState","_ref2","ImageProcessor","createCanvas","context","getContext","fillStyle","fillRect","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","abrupt","Promise","resolve","fileReader","FileReader","onload","imageData","result","img","Image","targetWidth","targetHeight","xOffset","yOffset","imgProportions","drawImage","readAsDataURL","stop","_x","_x2","_x3","_x4","_x5","text","newCanvas","font","textAlign","fillText","saveBlobAsFile","blob","fileName","document","setAttribute","window","URL","createObjectURL","click","sourceCanvas","imageBlobs","imagesLeftToProcess","forEach","x","i","exportCanvas","toBlob","concat","App","index_module","role","aria-label","components_Preview_Preview","components_Upload_Upload","components_Download_Download","components_TextControls_TextControls","mobx_react_devtools_default","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7155b4b2.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const AppStyled = styled.div`\n  @import url('https://fonts.googleapis.com/css?family=Lato');\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  min-width: 100vw;\n  min-height: 100vh;\n\n  margin: 0;\n\n  font-family: 'Lato', sans-serif;\n\n  h1 {\n    font-weight: normal;\n  }\n\n  .preview-image {\n    width: calc(100% - 72px);\n    max-width: 960px;\n\n    margin: 36px 0;\n    padding: 0;\n  }\n`;\n","import { observable, action, computed } from 'mobx';\nimport {TILE_SIZE, GAP_SIZE } from './global/constants';\n\nexport class AppState {\n  constructor(imageProcessor) {\n    this.imageProcessor = imageProcessor;\n  }\n  @observable tileSize = TILE_SIZE;\n  @observable gapSize = GAP_SIZE;\n  @observable overlayText = '';\n  @computed get width() {\n    return this.tileSize * 3 + this.gapSize * 2;\n  }\n  @computed get height() {\n    return this.tileSize;\n  }\n  @observable inputImageData = '';\n  @observable baseCanvas = this.imageProcessor.getPlaceholderCanvas(\n    this.width,\n    this.height,\n    this.tileSize,\n    this.gapSize\n  );\n  @action setBaseCanvas = baseCanvas => {\n    this.baseCanvas = baseCanvas;\n  };\n  @computed get previewCanvas() {\n    return this.imageProcessor.addTextToCanvas(\n      this.baseCanvas,\n      this.overlayText\n    );\n  }\n  @action addFile = file => {\n    this.imageProcessor\n      .getCanvasFromFile(\n        file,\n        this.width,\n        this.height,\n        this.tileSize,\n        this.gapSize\n      )\n      .then(canvas => this.setBaseCanvas(canvas));\n  };\n\n  @action setOverlayText = overlayText => {\n    this.overlayText = overlayText;\n  };\n\n  @computed get downloadImages() {\n    return () =>\n      this.imageProcessor.downloadImages(\n        this.previewCanvas,\n        this.tileSize,\n        this.gapSize\n      );\n  }\n}\n","export const TILE_SIZE = 1080;\nexport const GAP_SIZE = 10;","import React, { Component } from 'react';\nimport { func } from 'prop-types';\nimport { observer, inject } from 'mobx-react';\n\nexport class Upload extends Component {\n  static propTypes = {\n    addFile: func.isRequired,\n  };\n\n  render() {\n    const { addFile } = this.props;\n    return (\n      <input\n        className=\"file-upload\"\n        type=\"file\"\n        onChange={event => addFile(event.target.files[0])}\n      />\n    );\n  }\n}\n\nexport default inject(({ appState }) => ({\n  addFile: appState.addFile,\n}))(observer(Upload));\n","import React, { Component } from 'react';\nimport { object } from 'prop-types';\nimport { inject, observer } from 'mobx-react';\n\nclass Preview extends Component {\n  static propTypes = {\n    previewCanvas: object,\n  };\n  static defaultProps = {\n    previewCanvas: null,\n  };\n\n  render() {\n    return (\n      <img\n        alt=\"Preview\"\n        className=\"preview-image\"\n        src={\n          this.props.previewCanvas &&\n          this.props.previewCanvas.toDataURL('image/png')\n        }\n      />\n    );\n  }\n}\n\nexport { Preview };\nexport default inject(({ appState }) => ({\n  previewCanvas: appState.previewCanvas,\n}))(observer(Preview));\n","import React, { Component } from 'react';\nimport { func } from 'prop-types';\nimport { observer, inject } from 'mobx-react';\n\nclass Download extends Component {\n  static propTypes = {\n    downloadImages: func.isRequired,\n  };\n\n  render() {\n    return (\n      <button className=\"download-button\" onClick={this.props.downloadImages}>\n        Download images\n      </button>\n    );\n  }\n}\n\nexport { Download };\nexport default inject(({ appState }) => ({\n  downloadImages: appState.downloadImages,\n}))(observer(Download));\n","import React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { func, string } from 'prop-types';\nimport { throttle } from 'lodash';\n\nexport class TextControls extends Component {\n  static propTypes = {\n    overlayText: string,\n    setOverlayText: func.isRequired,\n  };\n  static defaultProps = {\n    overlayText: '',\n  };\n\n  static initialState = {\n    overlayText: '',\n  };\n\n  constructor(props) {\n    super(props);\n    this.setOverlayText = throttle(this.props.setOverlayText, 500);\n    this.state = {overlayText: ''};\n  }\n\n  onChange = ({ target: { value } }) => {\n    this.setState({ overlayText: value });\n    this.setOverlayText(value);\n  };\n  render() {\n    return (\n      <div>\n        Text: <input\n          type=\"text\"\n          value={this.state.overlayText}\n          onChange={this.onChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default inject(({ appState }) => ({\n  overlayText: appState.overlayText,\n  setOverlayText: appState.setOverlayText,\n}))(observer(TextControls));\n","import React, { Component } from 'react';\nimport { Provider } from 'mobx-react';\nimport DevTools from 'mobx-react-devtools';\nimport { AppStyled } from './AppStyled';\nimport { ImageProcessor } from './services';\nimport { AppState } from './AppState';\nimport { Preview, Upload, Download, TextControls } from './components';\n\nconst imageProcessor = new ImageProcessor();\nconst appState = new AppState(imageProcessor);\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider appState={appState}>\n        <AppStyled className=\"App\">\n          <h1>\n            <span role=\"img\" aria-label=\"Wizard emoji\">\n              🧙🏻‍♀️\n            </span>{' '}\n            Layout your image on 3x1 grid for Instagram\n          </h1>\n          <Preview />\n          <div>\n            <Upload />\n            <Download />\n          </div>\n          <TextControls />\n          <DevTools />\n        </AppStyled>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import { Promise } from 'rsvp';\nimport { createCanvas } from 'canvas';\n\nexport class ImageProcessor {\n  // createCanvas = (width, height) => {\n  //   const canvas = document.createElement('canvas');\n  //   canvas.width = width;\n  //   canvas.height = height;\n  //   return canvas;\n  // };\n\n  getPlaceholderCanvas = (width, height, tileSize, gapSize) => {\n    // const canvas = this.createCanvas(width, height);\n    const canvas = createCanvas(width, height);\n    const context = canvas.getContext('2d');\n    context.fillStyle = 'lightgray';\n    context.fillRect(0, 0, width, height);\n    context.fillStyle = 'white';\n    context.fillRect(tileSize + gapSize, 0, gapSize, tileSize);\n    context.fillRect(tileSize * 2 + gapSize * 2, 0, gapSize, tileSize);\n    return canvas;\n  };\n\n  getCanvasFromFile = async (file, width, height, tileSize, gapSize) =>\n    new Promise(resolve => {\n      const fileReader = new FileReader();\n\n      fileReader.onload = event => {\n        const imageData = event.target.result;\n        const img = new Image();\n\n        img.onload = ({ target }) => {\n          const img = target;\n          // const canvas = this.createCanvas(width, height);\n          const canvas = createCanvas(width, height);\n          const context = canvas.getContext('2d');\n          context.fillStyle = 'white';\n          context.fillRect(0, 0, width, height);\n          let targetWidth;\n          let targetHeight;\n          let xOffset;\n          let yOffset;\n          const imgProportions = img.width / img.height;\n          const canvasProportions = width / height;\n          if (imgProportions > canvasProportions) {\n            targetWidth = width;\n            targetHeight = width / imgProportions;\n            xOffset = 0;\n            yOffset = (height - targetHeight) / 2;\n          } else {\n            targetWidth = height * imgProportions;\n            targetHeight = height;\n            xOffset = (width - targetWidth) / 2;\n            yOffset = 0;\n          }\n          context.drawImage(img, xOffset, yOffset, targetWidth, targetHeight);\n          context.fillRect(tileSize, 0, gapSize, tileSize);\n          context.fillRect(tileSize * 2 + gapSize, 0, gapSize, tileSize);\n\n          resolve(canvas);\n        };\n\n        img.src = imageData;\n      };\n      fileReader.readAsDataURL(file);\n    });\n\n  addTextToCanvas = (\n    (canvas, text) => {\n      const { width, height } = canvas;\n      // const newCanvas = this.createCanvas(width, height);\n      const newCanvas = createCanvas(width, height);\n      const context = newCanvas.getContext('2d');\n      context.drawImage(canvas, 0, 0, width, height);\n      context.fillStyle = 'white';\n      context.font = '600px Helvetica, Arial, sans';\n      context.textAlign = 'center';\n      context.fillText(text, width / 2, height / 2 + 220);\n      return newCanvas;\n    }\n  );\n\n  saveBlobAsFile = (blob, fileName) => {\n    let a = document.createElement('a');\n    a.setAttribute('download', fileName);\n    a.setAttribute('href', window.URL.createObjectURL(blob));\n    a.click();\n  };\n\n  downloadImages = (sourceCanvas, tileSize, gapSize) => {\n    const imageBlobs = [];\n    let imagesLeftToProcess = 3;\n    [0, tileSize + gapSize, tileSize * 2 + gapSize * 2].forEach((x, i) => {\n      // const exportCanvas = this.createCanvas(tileSize, tileSize);\n      const exportCanvas = createCanvas(tileSize, tileSize);\n      const exportContext = exportCanvas.getContext('2d');\n      exportContext.drawImage(\n        sourceCanvas,\n        x,\n        0,\n        tileSize,\n        tileSize,\n        0,\n        0,\n        tileSize,\n        tileSize\n      );\n      exportCanvas.toBlob(blob => {\n        imageBlobs[2 - i] = blob; // reverse so that downloaded files sorted by time are in proper order\n        if (!--imagesLeftToProcess) {\n          imageBlobs.forEach((blob, i) => {\n            this.saveBlobAsFile(blob, `grid-image-${3 - i}.png`); //first download last image, then second, then first\n          });\n        }\n      });\n    });\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}