{"version":3,"sources":["AppState.js","global/constants.js","components/Upload/Upload.js","components/Preview/Preview.js","components/Download/Download.js","components/TextControls/TextControls.js","components/Nav/Nav.js","App.js","services/ImageProcessor/ImageProcessor.js","serviceWorker.js","index.js"],"names":["AppState","_class","imageProcessor","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","createClass","key","get","tileSize","gapSize","addTextToCanvas","baseCanvas","overlayText","_this","downloadImages","previewCanvas","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","computed","getOwnPropertyDescriptor","getPlaceholderCanvas","width","height","action","_this2","_this3","file","getCanvasFromFile","then","canvas","setBaseCanvas","_this4","UploadStyled","styled","div","_templateObject","inject","_ref2","addFile","appState","observer","_ref","react_default","a","createElement","className","type","onChange","event","target","files","PreviewStyled","Preview_templateObject","Preview","alt","src","toDataURL","defaultProps","onClick","TextControls","setOverlayText","placeholder","aria-label","value","_ref3","NavStyled","nav","Nav_templateObject","Nav","href","role","data-toggle","data-target","aria-controls","aria-expanded","id","components_Upload_Upload","components_TextControls_TextControls","components_Download_Download","AppStyled","App_templateObject","ImageProcessor","createCanvas","context","getContext","fillStyle","fillRect","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","abrupt","Promise","resolve","fileReader","FileReader","onload","imageData","result","img","Image","targetWidth","targetHeight","xOffset","yOffset","imgProportions","drawImage","readAsDataURL","stop","_x","_x2","_x3","_x4","_x5","apply","arguments","text","newCanvas","font","textAlign","fillText","saveBlobAsFile","blob","fileName","document","setAttribute","window","URL","createObjectURL","click","sourceCanvas","imageBlobs","imagesLeftToProcess","forEach","x","i","exportCanvas","toBlob","concat","App","index_module","components_Nav_Nav","components_Preview_Preview","mobx_react_devtools_default","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af64177c.chunk.js","sourcesContent":["import { observable, action, computed } from 'mobx';\nimport {TILE_SIZE, GAP_SIZE } from './global/constants';\n\nexport class AppState {\n  constructor(imageProcessor) {\n    this.imageProcessor = imageProcessor;\n  }\n  @observable tileSize = TILE_SIZE;\n  @observable gapSize = GAP_SIZE;\n  @observable overlayText = '';\n  @computed get width() {\n    return this.tileSize * 3 + this.gapSize * 2;\n  }\n  @computed get height() {\n    return this.tileSize;\n  }\n  @observable inputImageData = '';\n  @observable baseCanvas = this.imageProcessor.getPlaceholderCanvas(\n    this.width,\n    this.height,\n    this.tileSize,\n    this.gapSize\n  );\n  @action setBaseCanvas = baseCanvas => {\n    this.baseCanvas = baseCanvas;\n  };\n  @computed get previewCanvas() {\n    return this.imageProcessor.addTextToCanvas(\n      this.baseCanvas,\n      this.overlayText\n    );\n  }\n  @action addFile = file => {\n    this.imageProcessor\n      .getCanvasFromFile(\n        file,\n        this.width,\n        this.height,\n        this.tileSize,\n        this.gapSize\n      )\n      .then(canvas => this.setBaseCanvas(canvas));\n  };\n\n  @action setOverlayText = overlayText => {\n    this.overlayText = overlayText;\n  };\n\n  @computed get downloadImages() {\n    return () =>\n      this.imageProcessor.downloadImages(\n        this.previewCanvas,\n        this.tileSize,\n        this.gapSize\n      );\n  }\n}\n","export const TILE_SIZE = 1080;\nexport const GAP_SIZE = 10;","import React from 'react';\nimport styled from '@emotion/styled';\nimport { func } from 'prop-types';\nimport { observer, inject } from 'mobx-react';\n\nconst UploadStyled = styled.div`\n  .file-upload {\n    cursor: pointer;\n  }\n`;\n\nexport const Upload = ({ addFile }) => (\n  <UploadStyled>\n    <input\n      className=\"file-upload\"\n      type=\"file\"\n      onChange={event => addFile(event.target.files[0])}\n    />\n  </UploadStyled>\n);\n\nUpload.propTypes = {\n  addFile: func.isRequired,\n};\n\nexport default inject(({ appState }) => ({\n  addFile: appState.addFile,\n}))(observer(Upload));\n","import React from 'react';\nimport { object } from 'prop-types';\nimport { inject, observer } from 'mobx-react';\nimport styled from '@emotion/styled';\n\nconst PreviewStyled = styled.div`\nheight: 100%;\n  .preview-image {\n    max-width: 100%;\n  }\n`\n\nexport const Preview = ({ previewCanvas }) => (\n  <PreviewStyled className=\"row align-items-center\">\n    <div className=\"col-12\">\n      <img\n        alt=\"Preview\"\n        className=\"preview-image\"\n        src={previewCanvas && previewCanvas.toDataURL('image/png')}\n      />\n    </div>\n  </PreviewStyled>\n);\n\nPreview.propTypes = {\n  previewCanvas: object,\n};\n\nPreview.defaultProps = {\n  previewCanvas: null,\n};\n\nexport default inject(({ appState }) => ({\n  previewCanvas: appState.previewCanvas,\n}))(observer(Preview));\n","import React from 'react';\nimport { func } from 'prop-types';\nimport { observer, inject } from 'mobx-react';\n\nexport const Download = ({ downloadImages }) => (\n  <button\n    className=\"btn btn-outline-success my-2 my-sm-0\"\n    onClick={downloadImages}\n  >\n    Download images\n  </button>\n);\n\nDownload.propTypes = {\n  downloadImages: func.isRequired,\n};\n\nexport default inject(({ appState }) => ({\n  downloadImages: appState.downloadImages,\n}))(observer(Download));\n","import React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { func, string } from 'prop-types';\n\nimport styled from '@emotion/styled';\n\nexport const TextControls = ({ overlayText, setOverlayText }) => {\n  const onChange = ({ target: { value } }) => {\n    setOverlayText(value);\n  };\n\n  return (\n    <form className=\"form-inline my-2 my-lg-0\">\n      <input\n        className=\"form-control mr-sm-2\"\n        type=\"text\"\n        placeholder=\"Add text...\"\n        aria-label=\"Add text\"\n        value={overlayText}\n        onChange={onChange}\n      />\n    </form>\n  );\n};\n\nTextControls.propTypes = {\n  overlayText: string,\n  setOverlayText: func.isRequired,\n};\nTextControls.defaultProps = {\n  overlayText: '',\n};\n\nexport default inject(({ appState }) => ({\n  overlayText: appState.overlayText,\n  setOverlayText: appState.setOverlayText,\n}))(observer(TextControls));\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { Upload, TextControls, Download } from '../';\n\nconst NavStyled = styled.nav`\n  width: 100%;\n`;\n\nexport const Nav = () => (\n  <NavStyled className=\"navbar navbar-expand-md navbar-light bg-light\">\n    <a className=\"navbar-brand\" href=\"/\">\n      <span role=\"img\" aria-label=\"Wizard emoji\">\n        🧙🏻‍♀️\n      </span>{' '}\n      Grid Magic\n    </a>\n    <button\n      className=\"navbar-toggler\"\n      type=\"button\"\n      data-toggle=\"collapse\"\n      data-target=\"#navbarSupportedContent\"\n      aria-controls=\"navbarSupportedContent\"\n      aria-expanded=\"false\"\n      aria-label=\"Toggle navigation\"\n    >\n      <span className=\"navbar-toggler-icon\" />\n    </button>\n\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul className=\"navbar-nav mr-auto\">\n        <li className=\"nav-item\">\n          <Upload />\n        </li>\n      </ul>\n      <TextControls />\n      <Download />\n    </div>\n  </NavStyled>\n);\n\nexport default Nav;\n","import React from 'react';\nimport { Provider } from 'mobx-react';\nimport DevTools from 'mobx-react-devtools';\nimport styled from '@emotion/styled';\nimport { ImageProcessor } from './services';\nimport { AppState } from './AppState';\nimport { Preview, Nav } from './components';\n\nexport const AppStyled = styled.div`\n  @import url('https://fonts.googleapis.com/css?family=Lato');\n\n  height: 100vh;\n  font-family: 'Lato', sans-serif;\n`;\n\nconst imageProcessor = new ImageProcessor();\nconst appState = new AppState(imageProcessor);\n\nexport const App = () => (\n  <Provider appState={appState}>\n    <AppStyled className=\"App container-fluid\">\n      <Nav />\n      <Preview />\n      <DevTools />\n    </AppStyled>\n  </Provider>\n);\n\nexport default App;\n","import { Promise } from 'rsvp';\nimport { createCanvas } from 'canvas';\n\nexport class ImageProcessor {\n\n  getPlaceholderCanvas = (width, height, tileSize, gapSize) => {\n    const canvas = createCanvas(width, height);\n    const context = canvas.getContext('2d');\n    context.fillStyle = '#E6E7E6';\n    context.fillRect(0, 0, width, height);\n    context.fillStyle = 'white';\n    context.fillRect(tileSize + gapSize, 0, gapSize, tileSize);\n    context.fillRect(tileSize * 2 + gapSize * 2, 0, gapSize, tileSize);\n    return canvas;\n  };\n\n  getCanvasFromFile = async (file, width, height, tileSize, gapSize) =>\n    new Promise(resolve => {\n      const fileReader = new FileReader();\n\n      fileReader.onload = event => {\n        const imageData = event.target.result;\n        const img = new Image();\n\n        img.onload = ({ target }) => {\n          const img = target;\n          const canvas = createCanvas(width, height);\n          const context = canvas.getContext('2d');\n          context.fillStyle = 'white';\n          context.fillRect(0, 0, width, height);\n          let targetWidth;\n          let targetHeight;\n          let xOffset;\n          let yOffset;\n          const imgProportions = img.width / img.height;\n          const canvasProportions = width / height;\n          if (imgProportions > canvasProportions) {\n            targetWidth = width;\n            targetHeight = width / imgProportions;\n            xOffset = 0;\n            yOffset = (height - targetHeight) / 2;\n          } else {\n            targetWidth = height * imgProportions;\n            targetHeight = height;\n            xOffset = (width - targetWidth) / 2;\n            yOffset = 0;\n          }\n          context.drawImage(img, xOffset, yOffset, targetWidth, targetHeight);\n          context.fillRect(tileSize, 0, gapSize, tileSize);\n          context.fillRect(tileSize * 2 + gapSize, 0, gapSize, tileSize);\n\n          resolve(canvas);\n        };\n\n        img.src = imageData;\n      };\n      fileReader.readAsDataURL(file);\n    });\n\n  addTextToCanvas = (\n    (canvas, text) => {\n      const { width, height } = canvas;\n      const newCanvas = createCanvas(width, height);\n      const context = newCanvas.getContext('2d');\n      context.drawImage(canvas, 0, 0, width, height);\n      context.fillStyle = 'white';\n      context.font = '600px Helvetica, Arial, sans';\n      context.textAlign = 'center';\n      context.fillText(text, width / 2, height / 2 + 220);\n      return newCanvas;\n    }\n  );\n\n  saveBlobAsFile = (blob, fileName) => {\n    let a = document.createElement('a');\n    a.setAttribute('download', fileName);\n    a.setAttribute('href', window.URL.createObjectURL(blob));\n    a.click();\n  };\n\n  downloadImages = (sourceCanvas, tileSize, gapSize) => {\n    const imageBlobs = [];\n    let imagesLeftToProcess = 3;\n    [0, tileSize + gapSize, tileSize * 2 + gapSize * 2].forEach((x, i) => {\n      const exportCanvas = createCanvas(tileSize, tileSize);\n      const exportContext = exportCanvas.getContext('2d');\n      exportContext.drawImage(\n        sourceCanvas,\n        x,\n        0,\n        tileSize,\n        tileSize,\n        0,\n        0,\n        tileSize,\n        tileSize\n      );\n      exportCanvas.toBlob(blob => {\n        imageBlobs[2 - i] = blob; // reverse so that downloaded files sorted by time are in proper order\n        if (!--imagesLeftToProcess) {\n          imageBlobs.forEach((blob, i) => {\n            this.saveBlobAsFile(blob, `grid-image-${3 - i}.png`); //first download last image, then second, then first\n          });\n        }\n      });\n    });\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}